#!/usr/bin/env bash

: '
    Runs Kotlin Selenium tests for a branch of learnyouahaskell/learnyouahaskell.github.io (or a fork thereof).

    Configuration is handled via JSON files (see "config/production.json").

    One of the tests produces browser page screenshots.

    When these tests are run against different branches, they will provide sets of screenshots that then can be compared
    using the "./comp" script.

    The operation of this script is as follows:

      - "./clone_repository" is used to clone the configured repositories single branch.
      - Ktor is spawned to serve the cloned repository content.
      - Selenium server is spawned to accept incoming functional test instructions against different browser targets.
      - The functional tests are executed.
'

source common

# Constants
readonly KTOR_DIRECTORY="ktor"
readonly SELENIUM_DIRECTORY="selenium"
readonly KTOR_START_MAX_ATTEMPTS="20"
readonly SELENIUM_START_MAX_ATTEMPTS="20"
readonly SERVICE_POLLING_WAIT="1s"

function printUsageAndExit { logError "Usage: 'test $(blue "CONFIG_FILE")'"; exit 1; }

# Check that we have a single argument
if [[ $# -ne 1 ]]; then printUsageAndExit; fi

ERRORS=0

# Ensure that the gnome-terminal command is installed
gnome-terminal --version &>/dev/null || \
  { ERRORS=1 && logError "$(sQuote "$(red "gnome-terminal")") command not found." ; }

# Ensure that jq installed
jq --version &>/dev/null || { ERRORS=1 && logError "$(sQuote "$(red "jq")") command not found." ; }

# Check that the provided configuration file argument value exists
CONFIG_FILE="${1}" && readonly CONFIG_FILE
if [[ ! -f $CONFIG_FILE ]]; then
  ERRORS=1 && logError "Configuration file $(sQuote "$(red "${CONFIG_FILE}")") inaccessible or nonexistent."
fi

# If there's any error, print usage instructions and exit
if [ "$ERRORS" -ne "0" ]; then printUsageAndExit ; fi

# Read the configuration file's identity
ID=$(jq -r '.id' "${CONFIG_FILE}") && readonly ID

# Some initial user feedback
logInfo "Executing test configuration $(sQuote "$(blue "${ID}")")."

./clone_repository "${CONFIG_FILE}" || { logError "Failed to clone repository." && exit 1 ; }

# Copy the Kotlin "Configuration" file from the root project to the ktor project
logInfo "Copying the Kotlin configuration file $(sQuote "$(blue "src/test/kotlin/config/Configuration.kt")") to $(sQuote "$(green "servers/ktor/src/main/kotlin")")."
cp -f src/test/kotlin/Configuration.kt "${KTOR_DIRECTORY}"/src/main/kotlin \
  || {  logError "Failed to copy Configuration.kt file." && exit 1 ; }

### Start Selenium
SELENIUM_SCHEME=$(jq -r ".tests.\"remote-web-driver\".\"scheme\"" "${CONFIG_FILE}") && readonly SELENIUM_SCHEME
SELENIUM_BIND_ADDRESS=$(jq -r ".tests.\"remote-web-driver\".\"bind-address\"" "${CONFIG_FILE}") && \
  readonly SELENIUM_BIND_ADDRESS
SELENIUM_PORT=$(jq -r ".tests.\"remote-web-driver\".port" "${CONFIG_FILE}") && readonly SELENIUM_PORT
SELENIUM_URL=$(makeUrl "${SELENIUM_SCHEME}" "${SELENIUM_BIND_ADDRESS}" "${SELENIUM_PORT}" "/ui") && \
readonly SELENIUM_URL
readonly SELENIUM_STATUS_CODE=200
if ! waitForStatusCode "Selenium" "${SELENIUM_URL}" "${SELENIUM_STATUS_CODE}" 1 "${SERVICE_POLLING_WAIT}" &>/dev/null ; then
  pushd "${SELENIUM_DIRECTORY}" &>/dev/null || \
    { logError "Failed to push Ktor directory \
    $(sQuote "$(red "${SELENIUM_DIRECTORY}")") onto directory stack." && exit 1 ; }
  gnome-terminal -- bash -i -c "./serve ${CONFIG_FILE}; read"
  popd &>/dev/null || { logError "Failed to pop directory from stack." && exit 1 ; }
fi

# Start Ktor serving our branch
KTOR_SCHEME=$(jq -r ".serving.scheme" "${CONFIG_FILE}") && readonly KTOR_SCHEME
KTOR_BIND_ADDRESS=$(jq -r ".serving.\"bind-address\"" "${CONFIG_FILE}") && readonly KTOR_BIND_ADDRESS
KTOR_PORT=$(jq -r ".serving.port" "${CONFIG_FILE}") && readonly KTOR_PORT
KTOR_URL=$(makeUrl "${KTOR_SCHEME}" "${KTOR_BIND_ADDRESS}" "${KTOR_PORT}" "/0386fc26-b323-4eb7-8cb8-840495c363d0") && \
  readonly KTOR_URL
readonly KTOR_STATUS_CODE=404
if ! waitForStatusCode "Ktor" "${KTOR_URL}" "${KTOR_STATUS_CODE}" 1 "${SERVICE_POLLING_WAIT}" &>/dev/null; then
  pushd "${KTOR_DIRECTORY}" &>/dev/null || { logError \
    "Failed to push Ktor directory $(sQuote "$(red "${KTOR_DIRECTORY}")") onto directory stack." && exit 1 ; }
  gnome-terminal -- bash -i -c "./serve ${CONFIG_FILE}; read"
  popd &>/dev/null || { logError "Failed to pop directory from stack." && exit 1 ; }
fi

# Wait for a 404 status code from requesting a non existent page from Ktor
waitForStatusCode "Ktor" "${KTOR_URL}" "${KTOR_STATUS_CODE}" ${KTOR_START_MAX_ATTEMPTS} "${SERVICE_POLLING_WAIT}" \
  || { logError "Failure in bringing up Ktor server." && exit 1 ; }
logInfo "Ktor is ready."

# Wait for a 200 status code from Selenium
waitForStatusCode "Selenium" "${SELENIUM_URL}" "${SELENIUM_STATUS_CODE}" ${SELENIUM_START_MAX_ATTEMPTS} \
  "${SERVICE_POLLING_WAIT}" || { logError "Failure in bringing up Selenium standalone server." && exit 1 ; }
logInfo "Selenium is ready."

# Run the Selenium tests
./gradlew test -Dio.github.learnyouahaskell.test.config="${CONFIG_FILE}"
