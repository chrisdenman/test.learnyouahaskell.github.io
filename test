#!/usr/bin/env bash

: '
    Runs Kotlin Selenium tests for a branch of learnyouahaskell/learnyouahaskell.github.io (or a fork thereof).

    Configuration is handled via JSON files (see "config/production.json").

    One of the tests, namely (src/kotlin/io/github/learnyouahaskell/test/ScreenshotTests.kt) produces
    browser page screenshots.

    When these tests are run against different branches, they will provide sets of screenshots that then can be compared
    using the "./comp" script.

    The operation of this script is as follows:

      - The required command dependencies are checked and asserted.
      - "./clone_repository" is used to clone the configured repositories single branch.
      - A JVM keystore is created which is used firstly to serve the content with Ktor and also to access the image
        resources from an HTTPS client.
      - An IPv4 hosts file (/etc/hosts) entry for 'test.learnyouahaskell.github.io' is created if not present
      - Selenium server is spawned which accepts incoming functional test instructions.
      - Ktor is spawned to serve the content from the cloned repository and branch.
      - The functional tests are executed.
      - The spawned Selenium and Ktor processes are killed.
'

# shellcheck disable=SC2164
SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
readonly SCRIPT_PATH

source "${SCRIPT_PATH}"/common

# Constants
readonly KTOR_DIRECTORY="${SCRIPT_PATH}/ktor"
readonly SELENIUM_DIRECTORY="${SCRIPT_PATH}/selenium"
readonly KTOR_START_MAX_ATTEMPTS="30"
readonly SELENIUM_START_MAX_ATTEMPTS="30"
readonly SERVICE_POLLING_WAIT="1s"

function printUsageAndExit { logError "Usage: 'test $(blue "CONFIG_FILE_PATH")'"; exit 1; }

# Check that we have a single argument
if [[ $# -ne 1 ]]; then printUsageAndExit; fi

ERRORS=0

# Ensure that the gnome-terminal command is installed
gnome-terminal --version &>/dev/null || \
  { ERRORS=1 && logError "$(sQuote "$(red "gnome-terminal")") command not found." ; }

# Ensure that jq installed
jq --version &>/dev/null || { ERRORS=1 && logError "$(sQuote "$(red "jq")") command not found." ; }

# Check that the provided configuration file argument value exists
CONFIG_FILE_PATH="${1}" && readonly CONFIG_FILE_PATH
if [[ ! -f $CONFIG_FILE_PATH ]]; then
  ERRORS=1 && logError "Configuration file $(sQuote "$(red "${CONFIG_FILE_PATH}")") inaccessible or nonexistent."
fi

# If there's any error, print usage instructions and exit
if [ "$ERRORS" -ne "0" ]; then printUsageAndExit ; fi

# Read the configuration file's identity
ID=$(jq -r '.id' "${CONFIG_FILE_PATH}") && readonly ID

# Some initial user feedback
logInfo "Executing test configuration $(sQuote "$(blue "${ID}")")."

# Clone the desired repository branch for testing
"${SCRIPT_PATH}"/clone_repository "${CONFIG_FILE_PATH}" || { logError "Failed to clone repository." && exit 1 ; }

# Read the desired JVM keystore file's path
KEYSTORE_FILE_PATH=$(jq -r ".serving.tls.\"keyStore-filename\"" "${CONFIG_FILE_PATH}") && readonly KEYSTORE_FILE_PATH
# Delete JVM keystore if extant
if [[ -f "${KEYSTORE_FILE_PATH}" ]]; then
  logInfo "Deleting JVM keystore $(sQuote "$(blue "${KEYSTORE_FILE_PATH}")")."
  rm -f "${KEYSTORE_FILE_PATH}"
else
  logInfo "No existing JVM keystore."
fi

# Generate the JVM keystore for HTTPS(TLS) test support
KEYSTORE_DIRECTORY=$(dirname "${KEYSTORE_FILE_PATH}") && readonly KEYSTORE_DIRECTORY
logInfo "Creating JVM keystore directory $(sQuote "$(green "${KEYSTORE_DIRECTORY}")")."
mkdir -p "${KEYSTORE_DIRECTORY}" || { logError "Failed to generate JVM keystore directory $(sQuote "$(red "${KEYSTORE_DIRECTORY}")")." && exit 1 ; }
./gradlew generateKeyStore \
    "-D${VM_PROPERTY_KEYSTORE_PASSWORD}=${KEYSTORE_PASSWORD}" \
    "-D${VM_PROPERTY_PRIVATE_KEY_PASSWORD}=${PRIVATE_KEY_PASSWORD}" \
    "-D${VM_PROPERTY_CONFIG_FILE_PATH}=${CONFIG_FILE_PATH}" || { logError "Failed to generate JVM KeyStore file $(sQuote "$(red "${KEYSTORE_FILE_PATH}")")." && exit 1 ; }

# List the newly created key store contents
logInfo "JVM keystore contents:"
keytool -v -list -storepass "${KEYSTORE_PASSWORD}" -keystore "${KEYSTORE_FILE_PATH}"

# Copy the Kotlin "Configuration" parsing class file from the root project to the ktor project
CONFIGURATION_CLASS_PATH=$(find "${SCRIPT_PATH}/src/test/kotlin" -name "${CONFIGURATION_CLASS_NAME}" || { logError "Failed to locate $(sQuote "$(red "${CONFIGURATION_CLASS_NAME}")")" && exit 1 ; }) && readonly CONFIGURATION_CLASS_PATH
CONFIGURATION_CLASS_PATH_RELATIVE="${CONFIGURATION_CLASS_PATH#"$SCRIPT_PATH"/src/test/}" && readonly CONFIGURATION_CLASS_PATH_RELATIVE
logInfo "Copying the Kotlin configuration file $(sQuote "$(blue "${CONFIGURATION_CLASS_PATH}")") to $(sQuote "$(green "${KTOR_DIRECTORY}/${CONFIGURATION_CLASS_PATH_RELATIVE}")")."
cp -f "${CONFIGURATION_CLASS_PATH}" "${KTOR_DIRECTORY}/src/main/${CONFIGURATION_CLASS_PATH_RELATIVE}" \
  || {  logError "Failed to copy Configuration.kt file." && exit 1 ; }

# Add a hosts file entry if not present
if ! grep "127.0.0.1        test.learnyouahaskell.github.io" /etc/hosts; then
  logInfo "Adding hosts file entry for $(sQuote "$(green "test.learnyouahaskell.github.io > 127.0.0.1")")."
  echo "127.0.0.1        test.learnyouahaskell.github.io" | sudo tee -a /etc/hosts ; \
fi

# Start Selenium
SELENIUM_SCHEME=$(jq -r ".tests.\"remote-web-driver\".\"scheme\"" "${CONFIG_FILE_PATH}") && readonly SELENIUM_SCHEME
SELENIUM_PORT=$(jq -r ".tests.\"remote-web-driver\".port" "${CONFIG_FILE_PATH}") && readonly SELENIUM_PORT
SELENIUM_URL=$(makeUrl "${SELENIUM_SCHEME}" "${HOST_DNS_NAME}" "${SELENIUM_PORT}" "/ui") && \
readonly SELENIUM_URL
readonly SELENIUM_STATUS_CODE=200
if ! waitForStatusCode "Selenium" "${SELENIUM_URL}" "${SELENIUM_STATUS_CODE}" 1 "${SERVICE_POLLING_WAIT}" &>/dev/null ; then
  logInfo "Starting Selenium..."
  pushDir "${SELENIUM_DIRECTORY}"
  gnome-terminal -- bash -i -c "${SELENIUM_DIRECTORY}/serve ${CONFIG_FILE_PATH}; read"
  popDir
fi

# Start Ktor serving our branch
KTOR_SCHEME="https" && readonly KTOR_SCHEME
KTOR_PORT=$(jq -r ".serving.tls.port" "${CONFIG_FILE_PATH}") && readonly KTOR_PORT
KTOR_URL=$(makeUrl "${KTOR_SCHEME}" "${HOST_DNS_NAME}" "${KTOR_PORT}" "/0386fc26-b323-4eb7-8cb8-840495c363d0") && \
  readonly KTOR_URL
ABS_KS_PATH=$(realpath "${KEYSTORE_FILE_PATH}") && readonly ABS_KS_PATH
readonly KTOR_STATUS_CODE=404
if ! waitForStatusCode "Ktor" "${KTOR_URL}" "${KTOR_STATUS_CODE}" 1 "${SERVICE_POLLING_WAIT}" &>/dev/null; then
  logInfo "Starting Ktor..."
  pushDir "${KTOR_DIRECTORY}"
  gnome-terminal -- bash -i -c "${KTOR_DIRECTORY}/serve ${CONFIG_FILE_PATH} ${ABS_KS_PATH}; read"
  popDir
fi

# Wait for expected status code from requesting a non existent page from Ktor
waitForStatusCode "Ktor" "${KTOR_URL}" "${KTOR_STATUS_CODE}" ${KTOR_START_MAX_ATTEMPTS} "${SERVICE_POLLING_WAIT}" \
  || { logError "Failure in bringing up Ktor server." && exit 1 ; }
logInfo "Ktor is ready."

# Wait for expected status code from Selenium
waitForStatusCode "Selenium" "${SELENIUM_URL}" "${SELENIUM_STATUS_CODE}" ${SELENIUM_START_MAX_ATTEMPTS} \
  "${SERVICE_POLLING_WAIT}" || { logError "Failure in bringing up Selenium standalone server." && exit 1 ; }
logInfo "Selenium is ready."

# Run the Selenium tests
pushDir "${SCRIPT_PATH}"
logInfo "Executing Selenium tests."
./gradlew test "-D${VM_PROPERTY_CONFIG_FILE_PATH}=${CONFIG_FILE_PATH}"
popDir

## Kill Selenium and Ktor
pkill gnome-terminal