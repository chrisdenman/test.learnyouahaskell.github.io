#!/usr/bin/env bash

: '
    Serves HTML content using Ktor.
'

source ../common

function printUsageAndExit { logError "Usage: 'serve $(blue "CONFIG_FILE") $(blue "KEYSTORE_FILE")'"; exit 1; }

# Check that we have exactly two arguments
if [[ $# -ne 2 ]]; then printUsageAndExit; fi

# Extract the location of our configuration file
CONFIG_FILE_PATH="${1}" && readonly CONFIG_FILE_PATH

# Check that the specified configuration file exists
if [[ ! -f $CONFIG_FILE_PATH ]]; then
  logError "Configuration file $(sQuote "$(red "${CONFIG_FILE_PATH}")") inaccessible or nonexistent." && printUsageAndExit
fi

# Extract the location of our key store file
KEYSTORE_FILE_PATH="${2}" && readonly KEYSTORE_FILE_PATH
# Check that the specified key store file exists
if [[ ! -f $KEYSTORE_FILE_PATH ]]; then
  logError "Key Store file $(sQuote "$(red "${KEYSTORE_FILE_PATH}")") inaccessible or nonexistent." && printUsageAndExit
fi

ERRORS=0
# Ensure that Java is installed
java -version &>/dev/null || { ERRORS=1 && logError "Java not found on the system." ; }
# Ensure that jq installed
jq --version &>/dev/null || { ERRORS=1 && logError "$(sQuote "$(red "jq")") command not found." ; }
# If there's any error, exit
if [ "$ERRORS" -ne "0" ]; then
  logError "Exiting due to previous errors."; exit 1
else
  # Read the configuration file's identity
  ID=$(jq -r '.id' "${CONFIG_FILE_PATH}") && readonly ID
  # Some initial user feedback
  logInfo "Using the $(sQuote "$(blue "${ID}")") configuration."

  # Read the JVM KeyStore path
  logInfo "Using the JVM KeyStore at $(sQuote "$(blue "${KEYSTORE_FILE_PATH}")")."

  # Output the current Java version we will be using
  java -version && logInfo "Press $(green "ctrl+d") to stop the server"

  # Executing Ktor with Gradle
  ./gradlew run \
    "-D${VM_PROPERTY_KEYSTORE_FILE_PATH}=${KEYSTORE_FILE_PATH}" \
    "-D${VM_PROPERTY_KEYSTORE_PASSWORD}=${KEYSTORE_PASSWORD}" \
    "-D${VM_PROPERTY_PRIVATE_KEY_PASSWORD}=${PRIVATE_KEY_PASSWORD}" \
    "-D${VM_PROPERTY_CONFIG_FILE_PATH}=${CONFIG_FILE_PATH}"
fi