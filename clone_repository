#!/usr/bin/env bash

: '
    Clones a GitHub repository using the GitHub CLI command.
'

ME=$(basename "$0") && readonly ME
# shellcheck disable=SC2164
SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
readonly SCRIPT_PATH

source "${SCRIPT_PATH}"/common

# Constants
function printUsageAndExit { logError "${ME}" "Usage: 'clone_repository $(blue "CONFIG_FILE")'"; exit 1; }

# Check that we have a single argument
if [[ $# -ne 1 ]]; then printUsageAndExit; fi

CONFIG_FILE_PATH="${1}" && readonly CONFIG_FILE_PATH
# Check that the provided configuration file argument value exists
if [[ ! -f $CONFIG_FILE_PATH ]]; then
  logError "${ME}" "Configuration file $(sQuote "$(red "${CONFIG_FILE_PATH}")") inaccessible or nonexistent." && printUsageAndExit
fi

ERRORS=0

# Ensure that the GitHub CLI installed
gh --version &>/dev/null || { ERRORS=1 && logError "${ME}" "$(sQuote "$(red "gh")") command not found." ; }
# Ensure that jq installed
jq --version &>/dev/null || { ERRORS=1 && logError "${ME}" "$(sQuote "$(red "jq")") command not found." ; }

# If there's any error, exit
if [ "$ERRORS" -ne "0" ]; then
  logError "${ME}" "Exiting due to previous errors."; exit 1
else
  # Read the configuration file's identity
  ID=$(jq -r '.id' "${CONFIG_FILE_PATH}") && readonly ID
  # Some initial user feedback
  logInfo "${ME}" "Using test configuration $(sQuote "$(blue "${ID}")")."

  # @todo do this all in 1 read?
  OWNER=$(jq -r '.github.owner' "${CONFIG_FILE_PATH}") && readonly OWNER
  REPOSITORY=$(jq -r '.github.repository' "${CONFIG_FILE_PATH}") && readonly REPOSITORY
  BRANCH=$(jq -r '.github.branch' "${CONFIG_FILE_PATH}") && readonly BRANCH
  OWNER_AND_REPO="${OWNER}/${REPOSITORY}" && readonly OWNER_AND_REPO
  HTML_CONTENT_ROOT=$(jq -r '.github.html_content_root' "${CONFIG_FILE_PATH}") && readonly HTML_CONTENT_ROOT

  WORKING_DIR=$(jq -r '.github.working_directory' "${CONFIG_FILE_PATH}")
  USING_TEMP_WORKING_DIR=0
  if [ "$WORKING_DIR" = "null" ]; then
    # Create a temporary working directory
    WORKING_DIR="$(mktemp -d)"
    USING_TEMP_WORKING_DIR=1
  else
    if [ -d "${WORKING_DIR}" ]; then
      mkdir -p "${WORKING_DIR}" &>/dev/null || \
          { logError "${ME}" "Failed to create working directory $(sQuote "$(red "${WORKING_DIR}")")." && exit 1 ; }
    fi
  fi
  OWNER_DIR="${WORKING_DIR}"/"${OWNER}"
  REPO_DIR="${OWNER_DIR}"/"${REPOSITORY}"
  readonly WORKING_DIR USING_TEMP_WORKING_DIR OWNER_DIR REPO_DIR
  logInfo "${ME}" "Using working directory $(sQuote "$(green "${WORKING_DIR}")")."

  logInfo "${ME}" "Using $(sQuote "$(green "ssh")") protocol with $(sQuote "$(blue "gh")")."
  gh config set git_protocol ssh

  mkdir -p "${REPO_DIR}" &>/dev/null \
    || { logError "${ME}" "Failed to create repository directory $(sQuote "$(red "${REPO_DIR}")")." && exit 1 ; }
  pushDir "${ME}" "${REPO_DIR}"

  if [ $USING_TEMP_WORKING_DIR = 1 ]; then
    logInfo "${ME}" "Cloning $(sQuote "$(blue "${OWNER_AND_REPO}")") into $(sQuote "$(blue "${REPO_DIR}")")."
    gh repo clone "${OWNER_AND_REPO}" "${REPO_DIR}" -- -b "${BRANCH}" --single-branch &>/dev/null \
      || { logError "${ME}" "Failed to clone $(sQuote "$(red "${OWNER_AND_REPO}")")." && exit 1 ; }
  else
    if git rev-parse --show-toplevel &>/dev/null; then
      REV_PARSE_DIR=$(git rev-parse --show-toplevel) && readonly REV_PARSE_DIR
      if [ "${REV_PARSE_DIR}" = "${REPO_DIR}" ]; then
        git fetch
        git reset --hard origin/"${BRANCH}" >/dev/null
      else
        logError "${ME}" "Unknown directory status $(sQuote "$(red "${REPO_DIR}")"), aborting." && exit 1
      fi
    else
      gh repo clone "${OWNER_AND_REPO}" "${REPO_DIR}" -- -b "${BRANCH}" --single-branch &>/dev/null \
        || { logError "${ME}" "Failed to clone $(sQuote "$(red "${OWNER_AND_REPO}")")." && exit 1 ; }
    fi
  fi

  SHA=$(git rev-parse @) && readonly SHA
  logInfo "${ME}" "Branch  $(sQuote "$(blue "${BRANCH}")") has SHA of $(sQuote "$(green "${SHA}")")."
  popDir "${ME}"

  # Update the github.sha property
  cat <<< "$(jq ".github.sha |= \"${SHA}\"" "${CONFIG_FILE_PATH}")" > "${CONFIG_FILE_PATH}"
  
  # Update the serving.html_content_root property
  REPO_HTML_CONTENT_ROOT="${REPO_DIR}/${HTML_CONTENT_ROOT}" && readonly REPO_HTML_CONTENT_ROOT
  logInfo "${ME}" "Setting configuration property $(sQuote "$(blue ".serving.html_content_root")") to $(sQuote "$(green "${REPO_HTML_CONTENT_ROOT}")")."
  cat <<< "$(jq ".serving.html_content_root |= \"${REPO_HTML_CONTENT_ROOT}\"" "${CONFIG_FILE_PATH}")" > "${CONFIG_FILE_PATH}"
fi
