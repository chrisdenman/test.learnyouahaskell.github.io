#!/usr/bin/env bash

: '
    Generates a JVM keystore.

    The "jks.json" config file may be used to override the default values.
    "jks.json" contains the default values the keystore generator uses for reference.
'

ME=$(basename "$0") && readonly ME
# shellcheck disable=SC2164

# Constants
# shellcheck disable=SC2034
readonly HOST_DNS_NAME="test.learnyouahaskell.github.io"
readonly DATE_FORMAT='%FT%H:%M:%S.%3NZ'
readonly TIME_ZONE="UTC0"
# shellcheck disable=SC2034
readonly VM_PROPERTY_CONFIG_FILE_PATH="io.github.learnyouahaskell.test.config"
# shellcheck disable=SC2034
readonly VM_PROPERTY_KEYSTORE_FILE_PATH="io.github.learnyouahaskell.test.keyStore"
# shellcheck disable=SC2034
readonly VM_PROPERTY_KEYSTORE_PASSWORD="io.github.learnyouahaskell.test.keyStorePassword"
# shellcheck disable=SC2034
readonly VM_PROPERTY_PRIVATE_KEY_PASSWORD="io.github.learnyouahaskell.test.privateKeyPassword"
# shellcheck disable=SC2034
readonly KEYSTORE_PASSWORD="ksp"
# shellcheck disable=SC2034
readonly PRIVATE_KEY_PASSWORD="pkp"

# Terminal Output
if [ -t 1 ] && [ -z "${NO_COLOR:-}" ]; then
    COLOR_RESET='[0m'; COLOR_RED='[31m'; COLOR_GREEN='[32m'; COLOR_YELLOW='[33m'; COLOR_BLUE='[34m'
else
    COLOR_RESET=''; COLOR_RED=''; COLOR_GREEN=''; COLOR_YELLOW=''; COLOR_BLUE=''
fi

function sQuote { echo "'${1}'" ; }
function red { echo "${COLOR_RED}${1}${COLOR_RESET}" ; }
function green { echo "${COLOR_GREEN}${1}${COLOR_RESET}" ; }
function yellow { echo "${COLOR_YELLOW}${1}${COLOR_RESET}" ; }
function blue { echo "${COLOR_BLUE}${1}${COLOR_RESET}" ; }
function logInfo  { echo -e "$(blue "$(TZ=${TIME_ZONE} date +${DATE_FORMAT})")" "$(yellow "$1")" "$(green "INFO")" "${2}" ; }
function logError  { echo -e "$(blue "$(TZ=${TIME_ZONE} date +${DATE_FORMAT})")" "$(red "$1")" "$(green "INFO")" "${2}" ; }

# Constants
function printUsageAndExit { logError "${ME}" "Usage: 'jks $(blue "CONFIG_FILE_PATH")'"; exit 1; }

# Check that we have a single argument
if [[ $# -ne 1 ]]; then printUsageAndExit; fi

ERRORS=0

# Ensure that jq installed
jq --version &>/dev/null || { ERRORS=1 && logError "${ME}" "$(sQuote "$(red "jq")") command not found." ; }

# Check that the provided configuration file argument value exists
CONFIG_FILE_PATH="${1}" && readonly CONFIG_FILE_PATH
if [[ ! -f $CONFIG_FILE_PATH ]]; then
  ERRORS=1 && logError "${ME}" "Configuration file $(sQuote "$(red "${CONFIG_FILE_PATH}")") inaccessible or nonexistent."
fi

# If there's any error, print usage instructions and exit
if [ "$ERRORS" -ne "0" ]; then printUsageAndExit ; fi

# Read the desired JVM keystore file's path
KEYSTORE_FILE_PATH=$(jq -r ".filename" "${CONFIG_FILE_PATH}") && readonly KEYSTORE_FILE_PATH
rm -f "${KEYSTORE_FILE_PATH}"

# Generate the JVM keystore for HTTPS(TLS) test support
./gradlew --quiet run \
    "-D${VM_PROPERTY_KEYSTORE_PASSWORD}=${KEYSTORE_PASSWORD}" \
    "-D${VM_PROPERTY_PRIVATE_KEY_PASSWORD}=${PRIVATE_KEY_PASSWORD}" \
    "-D${VM_PROPERTY_CONFIG_FILE_PATH}=${CONFIG_FILE_PATH}" || \
      { logError "${ME}" "Failed to generate JVM KeyStore file $(sQuote "$(red "${KEYSTORE_FILE_PATH}")")." && exit 1 ; }
